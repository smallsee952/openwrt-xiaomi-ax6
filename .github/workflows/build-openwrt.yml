name: Build OpenWrt AX6

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_branch:
        description: "Select openwrt branch"
        required: true
        default: "openwrt"
        type: choice
        options:
          - openwrt;master
          - openwrt;openwrt-23.05
      device_branch:
        description: "Select device branch"
        required: true
        default: "ipq807x"
        type: choice
        options:
          - ipq807x

env:
  # repo_openwrt: https://git.openwrt.org/openwrt/openwrt.git
  TZ: America/New_York
  device_branch: ${{ inputs.device_branch }}
  # Path 使用绝对路径 DIR 使用文件夹名称

jobs:
  build:
    name: Build Openwrt
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environment variable (${{ inputs.openwrt_branch }})
        id: var
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # ========== Set OpenWrt repo branch ==========
          repo_diy="https://github.com/$GITHUB_REPOSITORY"
          repo_diy_owner="$GITHUB_REPOSITORY_OWNER"

          IFS=';' read -ra BRANCHES <<< "${{ inputs.openwrt_branch }}"
          openwrt_branch=${BRANCHES[0]}
          repo_openwrt_branch=${BRANCHES[1]}
          if [[ "${openwrt_branch}" == "openwrt" ]]; then
            repo_openwrt="https://git.openwrt.org/openwrt/openwrt.git"
          elif [[ "${openwrt_branch}" == "immortalwrt" ]]; then
            repo_openwrt="https://github.com/immortalwrt/immortalwrt.git"
          elif [[ "${openwrt_branch}" == "immortalwrt-mt798x" ]]; then
            repo_openwrt="https://github.com/hanwckf/immortalwrt-mt798x.git"
          else
            echo -e "Unknown openwrt_branch: ${openwrt_branch} - ${repo_openwrt_branch}"
            exit 1
          fi

          echo "repo_diy=${repo_diy}" >> "$GITHUB_ENV"
          echo "repo_diy_owner=${repo_diy_owner}" >> "$GITHUB_ENV"

          echo "openwrt_branch=${openwrt_branch}" >> "$GITHUB_ENV"
          echo "repo_openwrt=${repo_openwrt}" >> "$GITHUB_ENV"
          echo "repo_openwrt_branch=${repo_openwrt_branch}" >> "$GITHUB_ENV"

          # ========== Build Path ==========
          dir_build="build"
          dir_diy="DIY"
          dir_output="output"
          # ---------- / ----------
          path_build="/${dir_build}"
          path_openwrt="${path_build}/${openwrt_branch}"
          # ---------- path_openwrt/ ----------
          path_output="${path_openwrt}/${dir_output}"
          path_diy="${path_openwrt}/${dir_diy}"
          path_diy_branch="${path_diy}/${openwrt_branch}"

          echo "path_build=${path_build}" >> "$GITHUB_ENV"
          echo "path_openwrt=${path_openwrt}" >> "$GITHUB_ENV"
          echo "path_output=${path_output}" >> "$GITHUB_ENV"
          echo "path_diy=${path_diy}" >> "$GITHUB_ENV"
          echo "path_diy_branch=${path_diy_branch}" >> "$GITHUB_ENV"

          # ========== DIY Files ==========
          diy_config="${path_diy_branch}/${device_branch}.config"
          diy_feeds="${path_diy_branch}/feeds.conf.default"
          diy_p1_sh="${path_diy_branch}/diy-part1.sh"
          diy_p2_sh="${path_diy_branch}/diy-part2.sh"
          diy_files="${path_diy_branch}/files"
          release_md="${path_diy_branch}/release.md"

          echo "diy_config=${diy_config}" >> "$GITHUB_ENV"
          echo "diy_feeds=${diy_feeds}" >> "$GITHUB_ENV"
          echo "diy_p1_sh=${diy_p1_sh}" >> "$GITHUB_ENV"
          echo "diy_p2_sh=${diy_p2_sh}" >> "$GITHUB_ENV"
          echo "diy_files=${diy_files}" >> "$GITHUB_ENV"
          echo "release_md=${release_md}" >> "$GITHUB_ENV"

          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Check environment variable
        id: checkenv
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "# ========== OpenWrt Info =========="
          echo -e "repo_diy: ${repo_diy}"
          echo -e "repo_diy_owner: ${repo_diy_owner}"
          echo -e "openwrt_branch: ${openwrt_branch}"
          echo -e "repo_openwrt: ${repo_openwrt}"
          echo -e "repo_openwrt_branch: ${repo_openwrt_branch}"
          echo -e "# ========== Build Path =========="
          echo -e "# ---------- / ----------"
          echo -e "path_build: ${path_build}"
          echo -e "# ---------- path_openwrt/ ----------"
          echo -e "path_openwrt: ${path_openwrt}"
          echo -e "path_output: ${path_output}"
          echo -e "path_diy: ${path_diy}"
          echo -e "path_diy_branch: ${path_diy_branch}"
          echo -e "# ========== DIY Files =========="
          echo -e "diy_config: ${diy_config}"
          echo -e "diy_feeds: ${diy_feeds}"
          echo -e "diy_p1_sh: ${diy_p1_sh}"
          echo -e "diy_p2_sh: ${diy_p2_sh}"
          echo -e "diy_files: ${diy_files}"
          echo -e "release_md: ${release_md}"
          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clear environment
        id: clearinit
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          # 删除docker所有镜像
          docker rmi $(docker images -q) 2>/dev/null
          # 如果环境变量 AGENT_TOOLSDIRECTORY 不为空，则删除该目录及其所有内容
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # 删除指定的目录及其所有内容，忽略所有错误信息
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 关闭所有交换空间 删除指定的交换文件
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          # 更新 Ubuntu 的软件包列表
          sudo -E apt-get -y -qq update
          # 删除指定的软件包及其配置文件。如果删除失败，则忽略错误
          sudo -E apt-get -y -qq purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          # 下载并安装指定 URL 中列出的软件包 https://is.gd/depend_ubuntu2204_openwrt
          # sudo -E apt-get -y -qq install $(curl -fsSL https://raw.githubusercontent.com/P3TERX/openwrt-list/master/depends-ubuntu-2004)
          # sudo apt-get install -y libgdbm-dev libsqlite3-dev tk-dev libbz2-dev
          sudo -E apt-get -y install \
          ack \
          antlr3 \
          asciidoc \
          autoconf \
          automake \
          autopoint \
          binutils \
          bison \
          build-essential \
          bzip2 \
          ccache \
          clang \
          clangd \
          cmake \
          cpio \
          curl \
          device-tree-compiler \
          ecj \
          fastjar \
          flex \
          gawk \
          gettext \
          gcc-multilib \
          g++-multilib \
          git \
          gperf \
          haveged \
          help2man \
          intltool \
          lib32gcc-s1 \
          libc6-dev-i386 \
          libelf-dev \
          libglib2.0-dev \
          libgmp3-dev \
          libltdl-dev \
          libmpc-dev \
          libmpfr-dev \
          libncurses5-dev \
          libncursesw5 \
          libncursesw5-dev \
          libreadline-dev \
          libssl-dev \
          libtool \
          lld \
          lldb \
          lrzsz \
          mkisofs \
          msmtp \
          nano \
          ninja-build \
          p7zip \
          p7zip-full \
          patch \
          pkgconf \
          python3 \
          python3-distutils \
          python3-docutils \
          python3-pip \
          python3-ply \
          qemu-utils \
          re2c \
          rsync \
          scons \
          squashfs-tools \
          subversion \
          swig \
          texinfo \
          uglifyjs \
          unzip \
          vim \
          wget \
          xmlto \
          xxd \
          zlib1g-dev \
          libdb++-dev
          # 删除所有不再需要的软件包及其配置文件, 清理 apt 的缓存
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          # 从 root 用户的 .bashrc 和 .profile 文件中删除包含 NVM_DIR 和 skel 的行
          # sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          # 删除指定的目录及其所有内容
          # sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          # 设置系统的时区为环境变量 TZ 指定的值
          sudo timedatectl set-timezone "${TZ}"
          # 重新加载 systemd 的配置
          sudo -E systemctl daemon-reload
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        working-directory: /
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          # 计算 /mnt 分区的可用空间（减去 1GB 作为缓冲）, 计算根分区的可用空间（减去 4GB 作为缓冲）
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          # 创建一个大小为 mnt_size 的文件 /mnt/mnt.img, 创建一个大小为 root_size 的文件 /root.img
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          # 将这两个文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7

          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
          sudo mkdir -p ${path_build}
          sudo mount /dev/github/runner ${path_build}
          sudo chown -R runner.runner ${path_build}

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone System
        id: clonesys
        working-directory: ${{ env.path_build }}
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          git clone ${repo_openwrt} ${path_openwrt} --single-branch --depth=1 --branch=${repo_openwrt_branch} 
          echo -e "repo_openwrt: [ ${repo_openwrt} ]\nBRANCH: [ ${repo_openwrt_branch} ]"

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone DIY
        id: clonediy
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          git clone ${repo_diy} ${path_diy} --single-branch --depth=1 --branch=master
          echo -e "repo_diy: [ ${repo_diy} ]\nBRANCH: [ master ]"

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (feeds.conf.default) Load custom feeds
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${diy_feeds}" && ! "${diy_feeds}" -ef "${path_openwrt}/feeds.conf.default" ]]; then
            echo -e "diy_feeds: ${diy_feeds}"
            cp -f ${diy_feeds} ${path_openwrt}/feeds.conf.default
          fi

      - name: (DIY_P1.sh) after load feeds, before update feeds
        working-directory: ${{ env.path_openwrt }}
        env:
          file_script: ${{ env.diy_p1_sh }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${file_script}" ]]; then
            echo -e "file_script: ${file_script}"
            chmod +x ${file_script}
            bash ${file_script}
            cat ${file_script}
          fi

      - name: Update feeds
        id: update
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"
          cat ./feeds.conf.default
          ./scripts/feeds update -a
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Install feeds
        id: install
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.update.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          ./scripts/feeds install -a
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (/files) Load custom files
        id: files
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"

          mkdir -p ./files/etc/config
          if [[ -e "${diy_files}" ]]; then
              cp -rf ${diy_files}/* ./files/
          fi

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (.config) Load custom configuration
        id: config
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"

          if [[ -e "${diy_config}" && ! "${diy_config}" -ef "${path_openwrt}/.config" ]]; then
            echo -e "diy_config: ${diy_config}"
            cp -f ${diy_config} ${path_openwrt}/.config
          else
            echo ".config file not found"
          fi

          yes "" | make oldconfig
          cat ./.config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: (DIY_P2.sh) after install feeds, before download package
        working-directory: ${{ env.path_openwrt }}
        env:
          file_script: ${{ env.diy_p2_sh }}
        run: |
          echo -e "Current working directory: $(pwd)"
          if [[ -e "${file_script}" ]]; then
            echo -e "file_script: ${file_script}"
            chmod +x ${file_script}
            bash ${file_script}
            cat ${file_script}
          fi

      - name: (.config) Update config
        working-directory: ${{ env.path_openwrt }}
        run: |
          echo -e "Current working directory: $(pwd)"
          echo "make oldconfig: update .config file..."
          yes "" | make oldconfig
          cat ./.config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Download package
        id: package
        working-directory: ${{ env.path_openwrt }}
        # env:
        #   FORCE_UNSAFE_CONFIGURE: 1
        if: ${{ steps.install.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "make download: $(($(nproc) + 1)) thread"
          make download -j$(($(nproc) + 1))
          # find dl -size -1024c -exec ls -l {} \;
          # find dl -size -1024c -exec rm -f {} \;
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile the OpenWrt
        id: compile
        working-directory: ${{ env.path_openwrt }}
        # env:
        #   FORCE_UNSAFE_CONFIGURE: 1
        if: ${{ steps.package.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Copy to output
        id: copy
        working-directory: /
        env:
          PATH_TARGET: ${{ env.path_openwrt }}/bin/targets/*/*/*
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          [[ -e "${path_output}" ]] || mkdir -p ${path_output}
          cp -rf ${PATH_TARGET} ${path_output}/
          cp -f ${path_openwrt}/.config ${path_output}/config
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup output
        id: output
        working-directory: ${{ env.path_output }}
        if: ${{ steps.copy.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          rm -rf packages

          # for file in *.bin
          # do
          #   if [[ ! -d "${file}" ]]
          #   then
          #     sha256sum "${file}" > "${file}.sha"
          #   fi
          # done

          echo -e "timestamp=$(date +"%y%mw%V")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: "[release.md] Record release.md"
        id: record
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          touch ${release_md}

          # 记录Clone源码的分支和构建者
          echo -e "# Build ${device_branch} - by ${repo_diy_owner}" >> ${release_md}
          echo -e "\n### OpenWrt branch" >> ${release_md}
          echo -e "\n- [${openwrt_branch};${repo_openwrt_branch}](${repo_openwrt}/tree/${repo_openwrt_branch})" >> ${release_md}

          # 记录编译完成时间
          echo -e "\n### Build Time" >> ${release_md}
          echo -e "\n- [x] $(date +"%Y-%m-%d %H:%M:%S %z")" >> ${release_md}

          # 记录DIY_P1.sh
          file_script=${diy_p1_sh}
          # 获取所有不以#开头的非空非空格行 并将结尾空格替换为换行符
          code_script=$(grep '^[^#]' ${file_script} | grep -v '^\s*$' | sed 's/\s+$/\\\n/g')
          # 折叠使用bash代码块 高亮代码
          echo -e "\n### $(basename "${file_script}")" >> ${release_md}
          echo -e "\n<details>\n<summary>Bash</summary>" >> ${release_md}
          echo -e "\n```bash" >> ${release_md}
          echo "${code_script}" >> ${release_md}
          echo -e "```" >> ${release_md}
          echo -e "\n</details>" >> ${release_md}

          # 记录feeds.conf.default
          # 获取所有不以#开头的非空非空格行 并将结尾空格替换为换行符
          code_feeds=$(grep '^[^#]' ${diy_feeds} | grep -v '^\s*$' | sed 's/\s+$/\\\n/g')
          # 折叠使用bash代码块 高亮代码
          echo -e "\n### $(basename "${diy_feeds}")" >> ${release_md}
          echo -e "\n### feeds setting" >> ${release_md}
          echo -e "\n<details>\n<summary>feeds.conf.default</summary>" >> ${release_md}
          echo -e "\n```bash" >> ${release_md}
          echo "${code_feeds}" >> ${release_md}
          echo -e "```" >> ${release_md}
          echo -e "\n</details>" >> ${release_md}

          # 记录DIY_P2.sh
          file_script=${diy_p2_sh}
          # 获取所有不以#开头的非空非空格行 并将结尾空格替换为换行符
          code_script=$(grep '^[^#]' ${file_script} | grep -v '^\s*$' | sed 's/\s+$/\\\n/g')
          # 折叠使用bash代码块 高亮代码
          echo -e "\n### $(basename "${file_script}")" >> ${release_md}
          echo -e "\n<details>\n<summary>Bash</summary>" >> ${release_md}
          echo -e "\n```bash" >> ${release_md}
          echo "${code_script}" >> ${release_md}
          echo -e "```" >> ${release_md}
          echo -e "\n</details>" >> ${release_md}

          # 记录.config配置
          if [[ -f ${diy_config} ]]; then
            # 获取所有不以#开头的非空非空格行 并将结尾空格替换为换行符
            config=$(grep '^[^#]' ${diy_config} | grep -v '^\s*$' | sed 's/\s+$/\\\n/g')
            # 折叠使用makefile代码块 高亮config设置
            echo -e "\n### config setting" >> ${release_md}
            echo -e "\n<details>\n<summary>config</summary>" >> ${release_md}
            echo -e "\n```makefile" >> ${release_md}
            echo "${config}" >> ${release_md}
            echo -e "```" >> ${release_md}
            echo -e "\n</details>" >> ${release_md}
          fi

          # 切换到Output目录
          # cd ${path_output}
          # echo -e "Current working directory: $(pwd)"

          # 记录Output bin文件
          echo -e "\n### Tested or NOT\n\n" >> ${release_md}
          for file in ${path_output}/*.bin
          do
            if [[ ! -d "${file}" ]]
            then
              echo -e "- [ ] $(basename "${file}")" >> ${release_md}
            fi
          done

          # 将仓库 URL 写入到 GITHUB_OUTPUT 环境变量指定的文件中
          # echo "TAGS_NAME=${TAGS_NAME}" >> ${GITHUB_OUTPUT}
          # Set output information 将构建标签和日期信息写入到 GITHUB_OUTPUT 环境变量指定的文件中

          # echo -e "record=${release_md}" >> ${GITHUB_OUTPUT}

      # https://github.com/ncipollo/release-action/blob/main/README.zh-Hans.md
      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        env:
          # device_branch: ${{ inputs.device_branch }}
          timestamp: ${{ steps.output.outputs.timestamp }}
          # release_md: ${{ steps.record.outputs.record }}
        with:
          name: "${{ env.openwrt_branch }}_${{ env.device_branch }}_${{ env.timestamp }}"
          tag: "${{ env.openwrt_branch }};${{ env.repo_openwrt_branch }}"
          artifacts: "${{ env.path_output }}/*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          bodyFile: "${{ env.release_md }}"
          # body: ""

      - name: Clear workspace
        id: clearwork
        working-directory: ${{ env.path_build }}
        run: |
          # rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
          rm -rf ./* 2>/dev/null
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
